/* For the functions: 'addQualityScore'  and 'getMostlyCleanImages'
Copyright (c) 2018 Gennadii Donchyts. All rights reserved.

This work is licensed under the terms of the MIT license.  
For a copy, see <https://opensource.org/licenses/MIT>.
*/
function addQualityScore(images, region, options) {
  var scorePercentile = (options && options.percentile) || 75
  var scale = (options && options.scale) || 500
  var mask = (options && options.mask) || null
  var qualityBand = (options && options.qualityBand) || 'B3'// green

  return images
    .map(function(i) { 
      var score = i.select(qualityBand) //.where(i.select('green').gt(0.5), 0.5)

      if(mask) {
        score = score.updateMask(mask)
      }

      score = score        
        .reduceRegion(ee.Reducer.percentile([scorePercentile]), region, scale).values().get(0)

      // var score = i.select('green').add(i.select('blue'))
      //  .reduceRegion(ee.Reducer.percentile([scorePercentile]), g, scale).values().get(0)

      // var cloudScore = computeCloudScore(i)
      // var score = cloudScore.gt(cloudThreshold)
      //   .reduceRegion(ee.Reducer.sum(), g, scale).values().get(0)

      return i.set({ quality_score: score })
    })
}



function getMostlyCleanImages(images, region, options) {
  region = ee.Geometry(region)
  
  var scale = (options && options.scale) || 500
  var p = (options && options.percentile) || 85

  // http://www.earthenv.org/cloud
  var modisClouds = ee.Image('users/gena/MODCF_meanannual')
  
  var cloudFrequency = modisClouds.divide(10000).reduceRegion(
    ee.Reducer.percentile([p]), 
    region.buffer(10000, scale*10), scale*10).values().get(0)
    
  //print('Cloud frequency (over AOI):', cloudFrequency)
  
  // decrease cloudFrequency, include some more partially-cloudy images then clip based on a quality metric
  // also assume inter-annual variability of the cloud cover
  cloudFrequency = ee.Number(cloudFrequency).subtract(0.15).max(0.0)
  
  if(options && options.cloudFrequencyThresholdDelta) {
    cloudFrequency = cloudFrequency.add(options.cloudFrequencyThresholdDelta)
  }
    
  var images = images
    .filterBounds(region)

  var size = images.size()
  
  images = addQualityScore(images, region, options)
    .filter(ee.Filter.gt('quality_score', 0)) // sometimes null?!

  // clip collection
  images = images.sort('quality_score')
    .limit(images.size().multiply(ee.Number(1).subtract(cloudFrequency)).toInt())
    
  return images
    //.set({scoreMax: scoreMax})
}


// Detect edges with Canny 
function edges(img) {
    var canny = ee.Algorithms.CannyEdgeDetector(img, 0.3, 0);
    return canny.mask(canny);
}


function otsu(histogram) {
  var counts = ee.Array(ee.Dictionary(histogram).get('histogram'));
  var means = ee.Array(ee.Dictionary(histogram).get('bucketMeans'));
  var size = means.length().get([0]);
  var total = counts.reduce(ee.Reducer.sum(), [0]).get([0]);
  var sum = means.multiply(counts).reduce(ee.Reducer.sum(), [0]).get([0]);
  var mean = sum.divide(total);
  
  var indices = ee.List.sequence(1, size);
  
  // Compute between sum of squares, where each mean partitions the data.
  var bss = indices.map(function(i) {
    var aCounts = counts.slice(0, 0, i);
    var aCount = aCounts.reduce(ee.Reducer.sum(), [0]).get([0]);
    var aMeans = means.slice(0, 0, i);
    var aMean = aMeans.multiply(aCounts)
        .reduce(ee.Reducer.sum(), [0]).get([0])
        .divide(aCount);
    var bCount = total.subtract(aCount);
    var bMean = sum.subtract(aCount.multiply(aMean)).divide(bCount);
    return aCount.multiply(aMean.subtract(mean).pow(2)).add(
           bCount.multiply(bMean.subtract(mean).pow(2)));
  });
  
  // Return the mean value corresponding to the maximum BSS.
  return means.sort(bss).get([-1]);
}


exports.addQualityScore = addQualityScore
exports.getMostlyCleanImages = getMostlyCleanImages
exports.edges = edges
exports.otsu = otsu
